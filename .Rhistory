gpx <- gpx$tracks[[1]][[1]]
sp::coordinates(gpx) <- ~ lat + lon
gpx@proj4string <- CRS("+init=epsg:2056")
data <- gpx
}
data <- tryCatch(
{
url <- paste("http://127.0.0.",serverNodeId,":17777/brouter?lonlats=",
startLon,",",startLat,"|",endLon,",",endLat,"&profile=",(profile),"&alternativeidx=0&format=",outputFormat,
"&bikerPower=",bikerPower,
"&totalMass=",totalMass,
"&dragCoefficient=",dragCoefficient,
"&rollingResistance=",rollingResistance,
"&maxSpeed=",maxSpeed,
sep="")
if(outputFormat=="csv"){
download.file(url, paste(tempdir(), "\\this.txt", sep=""), quiet=T)
data <- utils::read.table(paste(tempdir(), "\\this.txt", sep=""), sep="\t", header=TRUE)
} else if(outputFormat=="gpx"){
download.file(url, paste(tempdir(), "\\this.gpx", sep=""), quiet=T)
gpx <- plotKML::readGPX(paste(tempdir(), "\\this.gpx", sep=""))
gpx <- gpx$tracks[[1]][[1]]
sp::coordinates(gpx) <- ~ lat + lon
gpx@proj4string <- CRS("+init=epsg:2056")
data <- gpx
}
},     error=function(e){
stop("Did you start the servers with startServers before calling this function? Did you provide all necessary inputs?")
}
)
route <- brouterR::calculateRoute(startLat = startLat,
startLon = startLon,
endLat=endLat,
endLon=endLon,
profile="fastbike-verylowtraffic",
outputFormat="gpx")
route <- brouterR::calculateRoute(startLat = startLat,
startLon = startLon,
endLat=endLat,
endLon=endLon,
profile="trekking",
outputFormat="gpx")
route <- brouterR::calculateRoute(startLat = startLat,
startLon = startLon,
endLat=endLat,
endLon=endLon,
profile="trekking",
outputFormat="gpx")
# require(devtools)
# install_github("https://github.com/ivt-baug-ethz/brouterR")
library(brouterR)
startLat <- 47.364974
startLon <- 8.550177
endLat <- 47.400925
endLon <- 8.542541
brouterPath <-"C:\\Users\\LMF\\polybox\\BetwAcc_EBikeCity\\brouter-1.6.3\\brouter-1.6.3"
setServers(pathToBRouter = brouterPath)
startServers(pathToBRouter = brouterPath)
route <- brouterR::calculateRoute(startLat = startLat,
startLon = startLon,
endLat=endLat,
endLon=endLon,
profile="trekking",
outputFormat="gpx")
data <- tryCatch(
{
url <- paste("http://127.0.0.",serverNodeId,":17777/brouter?lonlats=",
startLon,",",startLat,"|",endLon,",",endLat,"&profile=",(profile),"&alternativeidx=0&format=",outputFormat,
"&bikerPower=",bikerPower,
"&totalMass=",totalMass,
"&dragCoefficient=",dragCoefficient,
"&rollingResistance=",rollingResistance,
"&maxSpeed=",maxSpeed,
sep="")
if(outputFormat=="csv"){
download.file(url, paste(tempdir(), "\\this.txt", sep=""), quiet=T)
data <- utils::read.table(paste(tempdir(), "\\this.txt", sep=""), sep="\t", header=TRUE)
} else if(outputFormat=="gpx"){
download.file(url, paste(tempdir(), "\\this.gpx", sep=""), quiet=T)
gpx <- plotKML::readGPX(paste(tempdir(), "\\this.gpx", sep=""))
gpx <- gpx$tracks[[1]][[1]]
sp::coordinates(gpx) <- ~ lat + lon
gpx@proj4string <- CRS("+init=epsg:2056")
data <- gpx
}
},     error=function(e){
stop("Did you start the servers with startServers before calling this function? Did you provide all necessary inputs?")
}
)
View(data)
1408/60
devtools::check()
require(devtools)
install_github("https://github.com/ivt-baug-ethz/brouterR")
remove.packages(brouterR)
remove.packages("brouterR")
install_github("https://github.com/ivt-baug-ethz/brouterR")
startLat <- 47.364974
startLon <- 8.550177
endLat <- 47.400925
endLon <- 8.542541
brouterPath <-"C:\\Users\\LMF\\polybox\\BetwAcc_EBikeCity\\brouter-1.6.3\\brouter-1.6.3"
setServers(pathToBRouter = brouterPath)
startServers(pathToBRouter = brouterPath)
# require(devtools)
# install_github("https://github.com/ivt-baug-ethz/brouterR")
library(brouterR)
brouterPath <-"C:\\Users\\LMF\\polybox\\BetwAcc_EBikeCity\\brouter-1.6.3\\brouter-1.6.3"
setServers(pathToBRouter = brouterPath)
startServers(pathToBRouter = brouterPath)
route <- brouterR::calculateRoute(startLat = startLat,
startLon = startLon,
endLat=endLat,
endLon=endLon,
profile="trekking",
outputFormat="gpx")
route <- brouterR::calculateRoute(startLat = startLat,
startLon = startLon,
endLat=endLat,
endLon=endLon,
profile="fastbike-verylowtraffic",
outputFormat="gpx")
library(leaflet)
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=route, weight = 0.1)
library(sf)
plotRoute <- st_as_sf(route)
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=plotRoute, weight = 0.1)
View(plotRoute)
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addCircles(data=plotRoute, weight = 0.1)
map
uninstall.packages("brouterR")
remove.packages("brouterR")
require(devtools)
install_github("https://github.com/ivt-baug-ethz/brouterR")
# require(devtools)
# install_github("https://github.com/ivt-baug-ethz/brouterR")
library(brouterR)
startLat <- 47.364974
startLon <- 8.550177
endLat <- 47.400925
endLon <- 8.542541
brouterPath <-"C:\\Users\\LMF\\polybox\\BetwAcc_EBikeCity\\brouter-1.6.3\\brouter-1.6.3"
setServers(pathToBRouter = brouterPath)
startServers(pathToBRouter = brouterPath)
route <- brouterR::calculateRoute(startLat = startLat,
startLon = startLon,
endLat=endLat,
endLon=endLon,
profile="fastbike-verylowtraffic",
outputFormat="gpx")
library(leaflet)
library(sf)
plotRoute <- st_as_sf(route)
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addCircles(data=plotRoute, weight = 0.1)
map
plot(route)
plot(route@coords)
View(route)
devtools::load_all()
route <- brouterR::calculateRoute(startLat = startLat,
startLon = startLon,
endLat=endLat,
endLon=endLon,
profile="fastbike-verylowtraffic",
outputFormat="gpx")
plot(route@coords)
library(leaflet)
library(sf)
plotRoute <- st_as_sf(route)
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addCircles(data=plotRoute, weight = 0.1)
map
plot(route@coords)
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addCircles(data=plotRoute, weight = 0.1)
map
plot(route)
library(leaflet)
library(sf)
plotRoute <- st_as_sf(route)
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addCircles(data=plotRoute, weight = 0.1)
map
View(plotRoute)
test <- sf::st_linestring(plotRoute)
test <- sf::st_line_merge(plotRoute)
test <- sf::st_line_merge.sf(plotRoute)
test <- sf::st_multipoint(plotRoute)
test <- sf::st_line_sample(plotRoute)
View(plotRoute)
test <- sf::st_cast(plotRoute)
View(test)
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addCircles(data=test, weight = 0.1)
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=test, weight = 0.1)
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addCircles(data=test, weight = 0.1)
test <- sf::st_cast(plotRoute, "MULTILINESTRING")
test <- sf::st_cast(plotRoute, "MULTIPOINT")
View(test)
test <- sf::st_cast(test, "LINESTRING")
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addCircles(data=test, weight = 0.1)
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=test, weight = 0.1)
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=test, weight = 0.1)
test <- sf::st_cast(test, "MULTILINESTRING")
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=test, weight = 0.1)
map
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=test)
map
plotRoute <- st_as_sf(route)
test <- sf::st_cast(plotRoute, "MULTIPOINT")
test <- sf::st_cast(test, "LINESTRING")
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=test)
map
View(test)
plotRoute <- st_as_sf(route)
test <- sf::st_cast(plotRoute, "MULTIPOINT")
test <- sf::st_cast(test, "LINESTRING")
test <- sf::st_cast(test, "MULTILINESTRING")
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=test)
map
View(test)
# Build linestrings
linestrings <- lapply(X = 1:n, FUN = function(x) {
pair <- st_combine(c(points[x], points[x + 1]))
line <- st_cast(pair, "LINESTRING")
return(line)
})
plotRoute <- st_as_sf(route)
test <- sf::st_cast(plotRoute, "MULTIPOINT")
# Build linestrings
n <- length(test) - 1
linestrings <- lapply(X = 1:n, FUN = function(x) {
pair <- st_combine(c(points[x], points[x + 1]))
line <- st_cast(pair, "LINESTRING")
return(line)
})
plotRoute <- st_as_sf(route)
test <- sf::st_cast(plotRoute, "MULTIPOINT")
dt <- rbindlist(list(test), use.names = TRUE)
library(data.table)
dt <- rbindlist(list(test), use.names = TRUE)
View(dt)
test <- sf::st_cast(plotRoute, "MULTIPOINT")
library(sfheaders)
this <- sfheaders::sf_linestring(
obj = test
, x = "lon"
, y = "lat"
, linestring_id = "id"
)
plotRoute
linestring <- plotRoute %>% st_coordinates() %>% st_linestring()
linestrin <-
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=linestring)
map
z=plotRoute$ele
m_xyz = cbind(linestring[, 1:2], z)
View(m_xyz)
end <- sf::st_linestring(m_xyz[linestring[, 3] == i, ])
linestring[, 3]
m = sf::st_coordinates(plotRoute)
end <- sf::st_linestring(m_xyz[m[, 3] == i, ])
linestrings = lapply(seq(n), function(i){
sf::st_linestring(m_xyz[m[, 3] == i, ])
})
n=1
linestrings = lapply(seq(n), function(i){
sf::st_linestring(m_xyz[m[, 3] == i, ])
})
m = sf::st_coordinates(plotRoute)
route <- brouterR::calculateRoute(startLat = startLat,
startLon = startLon,
endLat=endLat,
endLon=endLon,
profile="fastbike-verylowtraffic",
outputFormat="gpx")
plot(route)
library(leaflet)
library(sf)
plotRoute <- st_as_sf(route)
linestring <- plotRoute %>% st_coordinates() %>% st_linestring()
z=plotRoute$ele
m_xyz = cbind(linestring[, 1:2], z)
m = sf::st_coordinates(plotRoute)
sf::st_linestring(m_xyz[m[, 3] == i, ])
View(m_xyz)
test <- sf::st_linestring(m_xyz)
z=as.numeric(plotRoute$elevation)
plotRoute <- st_as_sf(route)
z=as.numeric(plotRoute$ele)
m_xyz = cbind(linestring[, 1:2], z)
m = sf::st_coordinates(plotRoute)
test <- sf::st_linestring(m_xyz)
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=test)
map
crs = sf::st_crs(plotRoute)
View(crs)
test <- test %>% st_sfc(crs=crs)
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=test)
map
View(test)
linestring <- plotRoute %>% st_coordinates() %>% st_linestring() %>% st_zm(drop=F,"Z")
linestring <- plotRoute %>% st_coordinates() %>% st_linestring() %>% st_zm(drop=F,what="Z")
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=linestring)
map
linestring
plotRoute <- st_as_sf(route, dim="XYZ")
View(plotRoute)
View(route)
library(st)
library(sp)
plotRoute <- st_as_sf(route, dim="XYZ")
View(plotRoute)
plotRoute$z <- plotRoute$ele
plotRoute <- st_as_sf(route, dim="XYZ")
plotRoute$z <- plotRoute$ele
plotRoute <- plotRoute %>% st_zm(drop=F, what="z")
plotRoute <- plotRoute %>% st_zm(drop=F, what="Z")
View(plotRoute)
plotRoute <- st_as_sf(route, dim="XYZ")
View(plotRoute)
plotRoute <- plotRoute %>% st_zm(as.matrix(plotRoute$geometry, plotRoute$ele)drop=F, what="Z")
test <-  st_zm(as.matrix(plotRoute$geometry, plotRoute$ele)),drop=F, what="Z")
test <-  st_zm(as.matrix(plotRoute$geometry, plotRoute$ele),drop=F, what="Z")
View(test)
View(route)
unlist(plotRoute$geometry)
test <-  st_zm(as.matrix(unlist(plotRoute$geometry), plotRoute$ele),drop=F, what="Z")
View(test)
test <-  st_zm((st_coordinate(plotRoute), plotRoute$ele),drop=F, what="Z")
test <-  st_zm(as.matrix(st_coordinates(plotRoute), plotRoute$ele),drop=F, what="Z")
View(test)
as.matrix(st_coordinates(plotRoute), plotRoute$ele)
plotRoute$ele
test <-  st_zm(as.matrix(st_coordinates(plotRoute), as.numeric(plotRoute$ele)),drop=F, what="Z")
View(test)
as.numeric(plotRoute$ele)
as.matrix(st_coordinates(plotRoute), as.numeric(plotRoute$ele))
cbind(st_coordinates(plotRoute), as.numeric(plotRoute$ele))
test <-  st_zm(cbind(st_coordinates(plotRoute), as.numeric(plotRoute$ele)),drop=F, what="Z")
View(test)
plotRoute <- st_as_sf(route, dim="XYZ")
View(plotRoute)
plotRoute <- st_as_sf(route, dim="XYZ")
linestring <- plotRoute %>% st_coordinates() %>% st_linestring()
linestring <- linestring %>% st_zm(drop=F)
linestring <- linestring %>% st_zm(drop=F, what="Z")
linestring
linestring <- plotRoute %>% st_coordinates() %>% st_linestring()
linestring <- linestring %>% st_zm(drop=F, what="Z")
linestring <- linestring %>% st_zm(plotRoute$ele, drop=F, what="Z")
plotRoute$geometry
gpx
View(plotRoute)
devtools::load_all()
route <- brouterR::calculateRoute(startLat = startLat,
startLon = startLon,
endLat=endLat,
endLon=endLon,
profile="fastbike-verylowtraffic",
outputFormat="gpx")
bikerPower=100
totalMass=90
dragCoefficient=0.559
rollingResistance=0.0077
maxSpeed=45
profile="trekking"
outputFormat="gpx"
serverNodeId=1
url <- paste("http://127.0.0.",serverNodeId,":17777/brouter?lonlats=",
startLon,",",startLat,"|",endLon,",",endLat,"&profile=",(profile),"&alternativeidx=0&format=",outputFormat,
"&bikerPower=",bikerPower,
"&totalMass=",totalMass,
"&dragCoefficient=",dragCoefficient,
"&rollingResistance=",rollingResistance,
"&maxSpeed=",maxSpeed,
sep="")
download.file(url, paste(tempdir(), "\\this.gpx", sep=""), quiet=T)
gpx <- plotKML::readGPX(paste(tempdir(), "\\this.gpx", sep=""))
gpx <- gpx$tracks[[1]][[1]]
View(gpx)
sp::coordinates(gpx) <- ~ lon + lat + ele
gpx <- plotKML::readGPX(paste(tempdir(), "\\this.gpx", sep=""))
gpx <- gpx$tracks[[1]][[1]]
sp::coordinates(gpx) <- ~ lon + lat
gpx@proj4string <- CRS("+init=epsg:2056")
gpx@coords
gpx@coords$ele <-gpx$ele
plotRoute <- st_as_sf(route, dim="XYZ")
z <- route$ele
z <- as.numeric(route$ele)
m <- st_coordinates(plotRoute)
m_xyz <- cbind(m,z)
View(m_xyz)
this <- plotRoute %>% st_geometry(m_xyz)
View(this)
this <- plotRoute %>% st_point(m_xyz)
this <- plotRoute %>% st_multipoint(m_xyz)
View(this)
View(test)
this <- st_linestring(as.matrix(m_xyz), dim="XYZ")
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=this)
map
final <- st_sfc(this, crs = sf::st_crs(plotRoute))
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=final)
map
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=final[[1]])
map
plot(final)
View(final)
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=final[[1]])
map
coors <- final[[1]]
coors
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=final)
map
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=st_zm(final))
map
this <- st_coordinates(final)
View(this)
final <- st_sfc(this, crs = CRS("+init=epsg:2056"))
sf::st_crs(plotRoute)
devtools::load_all()
route <- brouterR::calculateRoute(startLat = startLat,
startLon = startLon,
endLat=endLat,
endLon=endLon,
profile="fastbike-verylowtraffic",
outputFormat="linestring")
plot(route)
devtools::document()
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap, options = providerTileOptions(opacity = 0.77)) %>%
addPolylines(data=st_zm(final))
map
library(htmltools)
devtools::load_all()
devtools::load_all()
brouterR::plotRoute(route)
devtools::load_all()
brouterR::plotRoute(route)
devtools::document()
remove.packages("brouterR")
install_github("https://github.com/ivt-baug-ethz/brouterR")
require(devtools)
install_github("https://github.com/ivt-baug-ethz/brouterR")
# require(devtools)
# install_github("https://github.com/ivt-baug-ethz/brouterR")
library(brouterR)
startLat <- 47.364974
startLon <- 8.550177
endLat <- 47.400925
endLon <- 8.542541
brouterPath <-"C:\\Users\\LMF\\polybox\\BetwAcc_EBikeCity\\brouter-1.6.3\\brouter-1.6.3"
setServers(pathToBRouter = brouterPath)
startServers(pathToBRouter = brouterPath)
route <- brouterR::calculateRoute(startLat = startLat,
startLon = startLon,
endLat=endLat,
endLon=endLon,
profile="fastbike-verylowtraffic",
outputFormat="linestring")
