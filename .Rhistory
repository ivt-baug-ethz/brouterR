metric_vec_template(
metric_impl = mse_impl,
truth = truth,
estimate = estimate,
na_rm = na_rm,
cls = "numeric",
...
)
}
#___________________________________________________________________
modelClass <- dt_model_BMI_class %>% fit(BMI5~NationCateg+log(Age)+Age+I(Age^2)+Education+SettlStruc+Region+
HHWithKidsU15+Sex, data=training)
model <- dt_model_BMI %>% fit(BMI~NationCateg+log(Age)+Age+I(Age^2)+Education+SettlStruc+Region+
HHWithKidsU15+Sex, data=training)
pred <- predict(model, testing)
mse_vec(
truth   = testing$BMI,
estimate = pred$.pred
)
#___________________________________________________________________
model <- dt_model_BMI %>% fit(BMI~NationCateg+log(Age)+Age+I(Age^2)+Education+SettlStruc+Region+
HHWithKidsU15+Sex, data=bmi)
predBMI <-  mzmv[is.na(mzmv$BMI),-which(names(mzmv) %in% c("BMI"))]
predBMI1 <-  na.omit(predBMI)
pred1 <-
predict(modelClass, predBMI1)
BMI5 <- pred1$.pred_class
predBMI1$BMI5 <- BMI5
pred1 <-
predict(model, predBMI1)
pred1 <- cbind(pred1, predBMI1$HHNR)
colnames(pred1) <- c("BMI", "HHNR")
missing <- mzmv[!(mzmv$HHNR %in% pred1$HHNR), ]
missing <- missing[is.na(missing$BMI),]
#Now model without education for missing ones:
model <- dt_model_BMI %>%  fit(BMI~NationCateg+log(Age)+Age+I(Age^2)+Region+
HHWithKidsU15+Sex, data=bmi)
pred2 <-predict(model, missing)
pred2 <- cbind(pred2, missing$HHNR)
colnames(pred2) <- c("BMI", "HHNR")
mz.bmi <- rbind(pred1, pred2)
last <- mzmv[!(mzmv$HHNR %in% mz.bmi$HHNR), c("BMI", "HHNR")]
summary(bmi$BMI)
summary(mz.bmi$BMI)
#Correct the predicted mz.bmi distribuition
#_________________________________________________________________________________________________________
#create aggregation variables:
mz.bmi <- left_join(mz.bmi, mzmv[mzmv$HHNR %in% mz.bmi$HHNR, c("HHNR","Age", "Sex")], by="HHNR")
mz.bmi$ALTER7 <- ifelse(mz.bmi$Age>=75, 7,
ifelse(mz.bmi$Age<75 & mz.bmi$Age>64,6,
ifelse(mz.bmi$Age<64 & mz.bmi$Age>55,5,
ifelse(mz.bmi$Age<55 & mz.bmi$Age>45,4,
ifelse(mz.bmi$Age<45 & mz.bmi$Age>34,3,
ifelse(mz.bmi$Age<34 & mz.bmi$Age>24,2,1))))))
bmi$ALTER7 <- ifelse(bmi$Age>=75, 7,
ifelse(bmi$Age<75 & bmi$Age>64,6,
ifelse(bmi$Age<64 & bmi$Age>55,5,
ifelse(bmi$Age<55 & bmi$Age>45,4,
ifelse(bmi$Age<45 & bmi$Age>34,3,
ifelse(bmi$Age<34 & bmi$Age>24,2,1))))))
mz.bmi$ALTER7 <- as.factor(mz.bmi$ALTER7)
bmi$ALTER7 <- as.factor(bmi$ALTER7)
mz.bmi$BMI5 <- ifelse(mz.bmi$BMI<=18.5,1,
ifelse(mz.bmi$BMI>18.5 & mz.bmi$BMI<=22,2,
ifelse(mz.bmi$BMI>22 & mz.bmi$BMI<=25,3,
ifelse(mz.bmi$BMI>25 & mz.bmi$BMI<=30,4,5))))
bmi$BMI5 <- ifelse(bmi$BMI<=18.5,1,
ifelse(bmi$BMI>18.5 & bmi$BMI<=22,2,
ifelse(bmi$BMI>22 & bmi$BMI<=25,3,
ifelse(bmi$BMI>25 & bmi$BMI<=30,4,5))))
mz.bmi$BMI5 <- as.factor(mz.bmi$BMI5)
bmi$BMI5 <- as.factor(bmi$BMI5)
bmi$BMI <- ifelse(bmi$BMI>70, 70, bmi$BMI)
#_________________________________________________________________________________________________________
ref <- as.data.frame(xtabs(~ALTER7+BMI5+Sex, data=bmi))
ref$dens <- ref$Freq/sum(ref$Freq)
beob <- as.data.frame(xtabs(~ALTER7+BMI5+Sex, data=mz.bmi))
beob$dens <- beob$Freq/sum(beob$Freq)
length <- nrow(as.data.frame(xtabs(~ALTER7+Sex, data=mz.bmi)))
test <- cbind(ref, beob$dens)
test$diff <- test$dens-test$`beob$dens`
# install.packages("fitdistrplus", dependencies = T)
require(fitdistrplus)
#First fit correct distribuitions for each row of the reference observations:
#Fit distribuition
# options(warn = 0)
str(beob)
row=0
library(data.table)
for (i in levels(beob$ALTER7)){
for(o in levels(beob$Sex)){
print(paste(round(100*row/length,1), "% complete", sep=""))
row=row+1
bb <- beob[beob$ALTER7==i & beob$Sex==o, ]
rr <- ref[ref$ALTER7==i & ref$Sex==o, ]
bb$dens <- bb$Freq/sum(bb$Freq)
rr$dens <- rr$Freq/sum(rr$Freq)
bb$diff <- bb$dens-rr$dens
bb$BMI5 <- as.numeric(bb$BMI5)
rr$BMI5 <- as.numeric(rr$BMI5)
finish=20
#Run it three times to ensure enough changes are made
while(finish!=0){
finish = finish-1
for(j in max(bb$BMI):1){
#Get difference of present group:
thisDiff <- bb[bb$BMI5==j & bb$ALTER7==i & bb$Sex==o,]$diff
bb$Donors <- 0
if(length(thisDiff)!=0){
if(thisDiff<0.02){
goal <- floor(abs(thisDiff)*sum(bb$Freq))
number <- 0
diff <- goal
k=j
switch=0
while(diff>0){
# print(k)
if(k != j){
if(length(bb[bb$BMI==k,]$Freq)!=0) {
bb[bb$BMI5==k,]$Donors <- ifelse(bb[bb$BMI5==k,]$Freq>0 & bb[bb$BMI5==k,]$Freq<=diff,
bb[bb$BMI5==k,]$Freq,
ifelse(bb[bb$BMI5==k,]$Freq>0 & bb[bb$BMI5==k,]$Freq>=goal,diff,0))
number <- number + bb[bb$BMI5==k,]$Donors
diff <- goal-number
}
}
#Search in other direction if nothing is found
if(k==min(bb$BMI5) & goal>0){
k=j
switch=1
}
if(switch==0){
k=k-1
} else if(switch==1){
k=k+1
}
}
#Now randomly assign the donors to the new class and distribute the values with an uniform distribuition:
donors <- bb[bb$Donors>0, ]
for (t in unique(donors$BMI5)){
amount <- donors[donors$BMI5==t, ]$Donors
#Now distribute values to the donors according to distribuition of the observed data
thiData <- bmi[bmi$ALTER7 == i & bmi$BMI5 == j & bmi$Sex == o, ]$BMI
lognormal <- fitdistrplus::fitdist(thiData, "lnorm")
values <- rlnorm(amount, meanlog=getElement(lognormal$estimate,"meanlog"), sdlog=getElement(lognormal$estimate,"sdlog"))
#Assign the donors to new BMI5 category
selection <-  mz.bmi[mz.bmi$Sex==o & mz.bmi$ALTER7==i & mz.bmi$BMI5 == t,]
selection <- selection[sample(1:nrow(selection),amount), ]
selection$BMI5 <- j
selection$BMI <- values
mz.bmi <- mz.bmi[!(mz.bmi$HHNR %in% selection$HHNR), ]
mz.bmi <- as.data.table(mz.bmi)
selection <- as.data.table(selection)
bind <- list(mz.bmi, selection)
mz.bmi <- rbindlist(bind)
mz.bmi <- as.data.frame(mz.bmi)
#now delete changed data from mz.bmi and add new one:
#Recalculate matrices from mz.bmi
beob <- as.data.frame(xtabs(~ALTER7+BMI5+Sex, data=mz.bmi))
bb <- beob[beob$ALTER7==i & beob$Sex==o, ]
bb <- beob[beob$ALTER7==i & beob$Sex==o, ]
rr <- ref[ref$ALTER7==i & ref$Sex==o, ]
bb$dens <- bb$Freq/sum(bb$Freq)
rr$dens <- rr$Freq/sum(rr$Freq)
bb$diff <- bb$dens-rr$dens
bb$BMI5 <- as.numeric(bb$BMI5)
rr$BMI5 <- as.numeric(rr$BMI5)
}
}
}
}
}
}
}
#_________________________________________________________________________________________________________
colnames(mz.bmi) <- c("BMI", "HHNR")
mz.bmi <- mz.bmi[,1:2]
mz.bmi <- rbind(mz.bmi, last)
library(fitdistrplus)
fitdistrplus::descdist(mz.bmi$BMI)
fitdistrplus::descdist(bmi$BMI)
count(mz.bmi, BMI5)
count(bmi, BMI5)
hist(bmi$BMI, 50)
hist(mz.bmi$BMI, 50)
#____________________________________________________________________________________________
#Attach bmi to Zielpersonen
mzmv$BMI <- NULL
mzmv <- left_join(mzmv, mz.bmi)
count(mzmv, duplicated(HHNR))
#NOW ADD PASS ACTIVITY SCALE!!!
#___________________________________________________________________________________________
library(tidymodels)
training <- readRDS("C:\\Users\\LMF\\polybox\\BetwAcc_EBikeCity\\data\\trainingDataPASS_BAG.rds")
str(training)
dt_split <- initial_split(training, prop=3/4)
train <- training(dt_split)
test <- testing(dt_split)
dt_model <- nearest_neighbor(neighbors = 80, weight_func = "gaussian") %>% set_mode("classification")
# dt_model <- rand_forest(trees = 800, mtry=2, min_n = 200) %>% set_mode("classification")
model <- dt_model %>%  fit(PASS~log(Age)+Age+I(Age^2)+NationCateg+Region+SettlStruc+
Sex+BMI,
data =train)
pred <- predict(model, test)
sqrt(mse_vec(truth=as.numeric(test$PASS), estimate=as.numeric(pred$.pred_class)))
model <- dt_model %>%  fit(PASS~log(Age)+Age+I(Age^2)+NationCateg+Region+
Sex+BMI,
data =training)
pred <- predict(model, mzmv)
mzmv$PASS <- pred$.pred_class
#Now correct the estimations:
training$BMI5 <- ifelse(training$BMI<=18.5,1,
ifelse(training$BMI>18.5 & training$BMI<=22,2,
ifelse(training$BMI>22 & training$BMI<=25,3,
ifelse(training$BMI>25 & training$BMI<=30,4,5))))
training$BMI5 <- as.factor(training$BMI5)
mzmv$BMI5 <- ifelse(mzmv$BMI<=18.5,1,
ifelse(mzmv$BMI>18.5 & mzmv$BMI<=22,2,
ifelse(mzmv$BMI>22 & mzmv$BMI<=25,3,
ifelse(mzmv$BMI>25 & mzmv$BMI<=30,4,5))))
mzmv$BMI5 <- as.factor(mzmv$BMI5)
training$BMI5 <- ifelse(training$BMI<=18.5,1,
ifelse(training$BMI>18.5 & training$BMI<=22,2,
ifelse(training$BMI>22 & training$BMI<=25,3,
ifelse(training$BMI>25 & training$BMI<=30,4,5))))
training$BMI5 <- as.factor(training$BMI5)
mzmv$ALTER7 <- ifelse(mzmv$Age>=75, 7,
ifelse(mzmv$Age<75 & mzmv$Age>64,6,
ifelse(mzmv$Age<64 & mzmv$Age>55,5,
ifelse(mzmv$Age<55 & mzmv$Age>45,4,
ifelse(mzmv$Age<45 & mzmv$Age>34,3,
ifelse(mzmv$Age<34 & mzmv$Age>24,2,1))))))
mzmv$ALTER7 <- as.factor(mzmv$ALTER7)
mzmv$ALTER7 <- factor(mzmv$ALTER7, ordered = T, levels = levels(mzmv$ALTER7))
grouped <- training %>% group_by(ALTER7, Sex, BMI5, PASS) %>% dplyr::summarise(n=n())
grouped_n <- training %>% group_by(ALTER7, Sex, BMI5) %>% dplyr::summarise(n=n())
for (i in 1:nrow(grouped_n)){
print(i)
this <- grouped_n[i,1:3]
percReq <- grouped[grouped$ALTER7==this$ALTER7 & grouped$Sex==this$Sex & grouped$BMI5 == this$BMI5, ]
#Check PASS distribution in mzmv
mz <- mzmv[mzmv$Sex==this$Sex & mzmv$ALTER7==this$ALTER7 & mzmv$BMI5 == this$BMI5,]
MZgrouped <- mz %>% group_by(ALTER7, Sex, BMI5, PASS) %>% dplyr::summarise(n=n())
MZgrouped$percMZ <- MZgrouped$n/sum(MZgrouped$n)
percReq$ALTER7 <- as.numeric(percReq$ALTER7)
MZgrouped$ALTER7 <- as.numeric(MZgrouped$ALTER7)
percReq$PASS <- as.numeric(as.character(percReq$PASS))
MZgrouped$PASS <- as.numeric(as.character(MZgrouped$PASS))
percReq <- left_join(percReq, MZgrouped, by=c("ALTER7", "Sex", "BMI5", "PASS"))
percReq[is.na(percReq)] <- 0
percReq$Perc <- percReq$n.x/sum(percReq$n.x)
percReq$diff <- percReq$percMZ-percReq$Perc
finish=20
#Run it three times to ensure enough changes are made
while(finish!=0){
finish = finish-1
for(j in 10:1){
print(j)
percReq$Donors <- 0
thisDiff <- percReq[percReq$PASS==j,]$diff
if(length(thisDiff)!=0){
if(thisDiff<0.02){
goal <- floor(abs(thisDiff)*sum(percReq$n.y))
number <- 0
diff <- goal
k=j
switch=0
while(diff>0){
if(k != j){
if(length(percReq[percReq$PASS==k,]$n.y)!=0) {
percReq[percReq$PASS==k,]$Donors <- ifelse(percReq[percReq$PASS==k,]$n.y>0 & percReq[percReq$PASS==k,]$n.y<=diff,
percReq[percReq$PASS==k,]$n.y,
ifelse(percReq[percReq$PASS==k,]$n.y>0 & percReq[percReq$PASS==k,]$n.y>=goal,diff,0))
number <- number + percReq[percReq$PASS==k,]$Donors
diff <- goal-number
}
}
#Search in other direction if nothing is found
if(k==min(percReq$PASS) & goal>0){
k=j
switch=1
number <- 0
}
if(switch==0){
k=k-1
} else if(switch==1){
k=k+1
}
#With too little observations the loop never ends:
if(k>15){
diff=0
}
}
#Now randomly assign the donors to the new class:
donors <- percReq[percReq$Donors>0, ]
for (o in unique(donors$PASS)){
amount <- donors[donors$PASS==o, ]$Donors
#Assign the donors to new values
# mzmv[mzmv$Sex==this$Sex & mzmv$ALTER7==this$ALTER7 & mzmv$BMI5 == this$BMI5 & mzmv$PASS == o,][sample(nrow(mzmv[mzmv$Sex==this$Sex & mzmv$ALTER7==this$ALTER7 & mzmv$BMI5 == this$BMI5 & mzmv$PASS == o,]),amount), ]$PASS <- j
selection <-  mzmv[mzmv$Sex==this$Sex & mzmv$ALTER7==this$ALTER7 & mzmv$BMI5 == this$BMI5 & mzmv$PASS == o,]
selection <- selection[sample(1:nrow(selection),amount), ]
selection$PASS <- j
mzmv <- mzmv[!(mzmv$HHNR %in% selection$HHNR), ]
mzmv <- as.data.table(mzmv)
selection <- as.data.table(selection)
bind <- list(mzmv, selection)
mzmv <- rbindlist(bind)
mzmv <- as.data.frame(mzmv)
#Recalculate matrices
percReq <- grouped[grouped$ALTER7==this$ALTER7 & grouped$Sex==this$Sex & grouped$BMI5 == this$BMI5, ]
#Check PASS distribution in mzmv
mz <- mzmv[mzmv$Sex==this$Sex & mzmv$ALTER7==this$ALTER7 & mzmv$BMI5 == this$BMI5,]
MZgrouped <- mz %>% group_by(ALTER7, Sex, BMI5, PASS) %>% dplyr::summarise(n=n())
MZgrouped$percMZ <- MZgrouped$n/sum(MZgrouped$n)
percReq$ALTER7 <- as.numeric(percReq$ALTER7)
MZgrouped$ALTER7 <- as.numeric(MZgrouped$ALTER7)
percReq$PASS <- as.numeric(as.character(percReq$PASS))
MZgrouped$PASS <- as.numeric(as.character(MZgrouped$PASS))
percReq <- left_join(percReq, MZgrouped, by=c("ALTER7", "Sex", "BMI5", "PASS"))
percReq[is.na(percReq)] <- 0
percReq$Perc <- percReq$n.x/sum(percReq$n.x)
percReq$diff <- percReq$percMZ-percReq$Perc
}
#Now the same for the case of a positive difference (here we look from the bottom up)
}
}
}
}
}
hist(as.numeric(training$PASS))
hist(as.numeric(mzmv$PASS))
saveRDS(mzmv)
hist(as.numeric(training$PASS))
hist(as.numeric(mzmv$PASS))
count(mzmv, duplicated(HHNR))
saveRDS(mzmv, "C:\\Users\\LMF\\polybox\\BetwAcc_EBikeCity\\DATA\\mzmvEnrichedWithPASS_220415.rds")
devtools::document()
usethis::use_package("plotKML")
usethis::use_package("sp")
devtools::document()
rm(list = ls())
library(dplyr)
library(openxlsx)
require(devtools)
install_github("https://github.com/ivt-baug-ethz/brouterR")
# require(devtools)
# install_github("https://github.com/ivt-baug-ethz/brouterR")
library(brouterR)
route <- brouterR::calculateRoute(startLat = startLat,
startLon = startLon,
endLat=endLat,
endLon=endLon,
profile="fastbike-verylowtraffic",
format="gpx")
route <- brouterR::calculateRoute(startLat = startLat,
startLon = startLon,
endLat=endLat,
endLon=endLon,
profile="fastbike-verylowtraffic",
outputFormat="gpx")
startLat <- 47.364974
startLon <- 8.550177
endLat <- 47.400925
endLon <- 8.542541
brouterPath <-"C:\\Users\\LMF\\polybox\\BetwAcc_EBikeCity\\brouter-1.6.3\\brouter-1.6.3"
setServers(pathToBRouter = brouterPath)
startServers(pathToBRouter = brouterPath)
setServers(pathToBRouter = brouterPath)
startServers(pathToBRouter = brouterPath)
route <- brouterR::calculateRoute(startLat = startLat,
startLon = startLon,
endLat=endLat,
endLon=endLon,
profile="fastbike-verylowtraffic",
outputFormat="gpx")
route <- brouterR::calculateRoute(startLat = startLat,
startLon = startLon,
endLat=endLat,
endLon=endLon,
profile="trekking",
outputFormat="gpx")
setServers(pathToBRouter = brouterPath)
startServers(pathToBRouter = brouterPath)
route <- brouterR::calculateRoute(startLat = startLat,
startLon = startLon,
endLat=endLat,
endLon=endLon,
profile="trekking",
outputFormat="gpx")
data <- tryCatch(
{
url <- paste("http://127.0.0.",serverNodeId,":17777/brouter?lonlats=",
startLon,",",startLat,"|",endLon,",",endLat,"&profile=",(profile),"&alternativeidx=0&format=",outputFormat,
"&bikerPower=",bikerPower,
"&totalMass=",totalMass,
"&dragCoefficient=",dragCoefficient,
"&rollingResistance=",rollingResistance,
"&maxSpeed=",maxSpeed,
sep="")
if(outputFormat=="csv"){
download.file(url, paste(tempdir(), "\\this.txt", sep=""), quiet=T)
data <- utils::read.table(paste(tempdir(), "\\this.txt", sep=""), sep="\t", header=TRUE)
} else if(outputFormat=="gpx"){
download.file(url, paste(tempdir(), "\\this.gpx", sep=""), quiet=T)
gpx <- plotKML::readGPX(paste(tempdir(), "\\this.gpx", sep=""))
gpx <- gpx$tracks[[1]][[1]]
sp::coordinates(gpx) <- ~ lat + lon
gpx@proj4string <- CRS("+init=epsg:2056")
data <- gpx
}
},     error=function(e){
stop("Did you start the servers with startServers before calling this function? Did you provide all necessary inputs?")
}
)
url <- paste("http://127.0.0.",serverNodeId,":17777/brouter?lonlats=",
startLon,",",startLat,"|",endLon,",",endLat,"&profile=",(profile),"&alternativeidx=0&format=",outputFormat,
"&bikerPower=",bikerPower,
"&totalMass=",totalMass,
"&dragCoefficient=",dragCoefficient,
"&rollingResistance=",rollingResistance,
"&maxSpeed=",maxSpeed,
sep="")
serverNodeId=1
url <- paste("http://127.0.0.",serverNodeId,":17777/brouter?lonlats=",
startLon,",",startLat,"|",endLon,",",endLat,"&profile=",(profile),"&alternativeidx=0&format=",outputFormat,
"&bikerPower=",bikerPower,
"&totalMass=",totalMass,
"&dragCoefficient=",dragCoefficient,
"&rollingResistance=",rollingResistance,
"&maxSpeed=",maxSpeed,
sep="")
outputFormat="gpx"
profile="fastbike-verylowtraffic"
url <- paste("http://127.0.0.",serverNodeId,":17777/brouter?lonlats=",
startLon,",",startLat,"|",endLon,",",endLat,"&profile=",(profile),"&alternativeidx=0&format=",outputFormat,
"&bikerPower=",bikerPower,
"&totalMass=",totalMass,
"&dragCoefficient=",dragCoefficient,
"&rollingResistance=",rollingResistance,
"&maxSpeed=",maxSpeed,
sep="")
#' @param dragCoefficient The wind drag coefficient in m2. Defaults to 0.559
#' @param rollingResistance The rolling resistance of the underground. Default value assumes dry asphalt, 0.0077
#' @param maxSpeed The maximum speed achieved by the bike in km/h. Defaults to 45 km/h.
#'
#' @return Either a dataframe of the track (outputFormat="csv"), or a SpatialPointsDataFrame (outputFormat="gpx"). In the SpatialPointsDataFrame, elevation data of each point is contained in the data.
#' @export
#'
#' @examples
#'
#'
calculateRoute <- function(startLat, startLon, endLat, endLon, bikerPower=100, totalMass=90,
dragCoefficient=0.559, rollingResistance=0.0077, maxSpeed=45, profile="trekking", outputFormat="csv",serverNodeId=1){
data <- tryCatch(
{
url <- paste("http://127.0.0.",serverNodeId,":17777/brouter?lonlats=",
startLon,",",startLat,"|",endLon,",",endLat,"&profile=",(profile),"&alternativeidx=0&format=",outputFormat,
"&bikerPower=",bikerPower,
"&totalMass=",totalMass,
"&dragCoefficient=",dragCoefficient,
"&rollingResistance=",rollingResistance,
"&maxSpeed=",maxSpeed,
sep="")
if(outputFormat=="csv"){
download.file(url, paste(tempdir(), "\\this.txt", sep=""), quiet=T)
data <- utils::read.table(paste(tempdir(), "\\this.txt", sep=""), sep="\t", header=TRUE)
} else if(outputFormat=="gpx"){
download.file(url, paste(tempdir(), "\\this.gpx", sep=""), quiet=T)
gpx <- plotKML::readGPX(paste(tempdir(), "\\this.gpx", sep=""))
gpx <- gpx$tracks[[1]][[1]]
sp::coordinates(gpx) <- ~ lat + lon
gpx@proj4string <- CRS("+init=epsg:2056")
data <- gpx
}
},     error=function(e){
stop("Did you start the servers with startServers before calling this function? Did you provide all necessary inputs?")
}
)
return(data)
}
route <- brouterR::calculateRoute(startLat = startLat,
startLon = startLon,
endLat=endLat,
endLon=endLon,
profile="fastbike-verylowtraffic",
outputFormat="gpx")
bikerPower
bikerPower=100
totalMass=90
dragCoefficient=0.559
rollingResistance=0.0077
maxSpeed=45
url <- paste("http://127.0.0.",serverNodeId,":17777/brouter?lonlats=",
startLon,",",startLat,"|",endLon,",",endLat,"&profile=",(profile),"&alternativeidx=0&format=",outputFormat,
"&bikerPower=",bikerPower,
"&totalMass=",totalMass,
"&dragCoefficient=",dragCoefficient,
"&rollingResistance=",rollingResistance,
"&maxSpeed=",maxSpeed,
sep="")
if(outputFormat=="csv"){
download.file(url, paste(tempdir(), "\\this.txt", sep=""), quiet=T)
data <- utils::read.table(paste(tempdir(), "\\this.txt", sep=""), sep="\t", header=TRUE)
} else if(outputFormat=="gpx"){
download.file(url, paste(tempdir(), "\\this.gpx", sep=""), quiet=T)
gpx <- plotKML::readGPX(paste(tempdir(), "\\this.gpx", sep=""))
gpx <- gpx$tracks[[1]][[1]]
sp::coordinates(gpx) <- ~ lat + lon
gpx@proj4string <- CRS("+init=epsg:2056")
data <- gpx
}
devtools::document()
